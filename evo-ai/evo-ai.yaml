version: '3.8'

#  Repositorio Evo ai api: https://github.com/EvolutionAPI/evo-ai
#  Repositorio Evo AI Front: https://github.com/EvolutionAPI/evo-ai-frontend

x-variaveis: &variaveis
  # Metadados da API
  API_TITLE: Evo API
  API_DESCRIPTION: API para execução de agentes de IA
  API_VERSION: 1.0.0
  DOMAIN: ${DOMAIN:-seudominio.com.br}
  SUBDOMAIN_EVOAPI: ${SUBDOMAIN_EVOAPI:-api}
  API_URL: "https://${SUBDOMAIN_EVOAPI}.${DOMAIN}"
  # Organização
  ORGANIZATION_NAME: ${ORGANIZATION_NAME:-Evo AI}
  ORGANIZATION_URL: "https://${SUBDOMAIN_EVOAPI}.${DOMAIN}"
  # Banco de Dados
  POSTGRES_CONNECTION_STRING: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/evo_ai # TODO: Verificar se é necessário
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_PASSWORD:
  REDIS_SSL: ${REDIS_SSL:-false}
  REDIS_KEY_PREFIX: evoai
  REDIS_TTL: 3600
  # Cache de Ferramentas
  TOOLS_CACHE_TTL: 3600
  # JWT
  JWT_SECRET_KEY: ${JWT_SECRET_KEY:-DE3fdcc60d45985b5a0c99155b9903724a}
  JWT_ALGORITHM: HS256
  JWT_EXPIRATION_TIME: 3600
  # Criptografia
  ENCRYPTION_KEY: ${ENCRYPTION_KEY:-DEnI6o981Motm2vRwq6djoNv6H8AA2Jt9ZoULqcjfWV0g=}
  SECRET_KEY: ${SECRET_KEY:-DEnI6o98Nv6m2vR1Mot6djowqH8AA2Jt9ZoULqcjfWV0g=}
  PYTHONPATH: /app/src
  LOG_LEVEL: INFO
  # Servidor
  HOST: 0.0.0.0
  PORT: 8000
  DEBUG: ${DEBUG:-false}
  # Admin demo config
  ADMIN_EMAIL: ${ADMIN_EMAIL:-adm@example.com}
  ADMIN_INITIAL_PASSWORD: ${ADMIN_INITIAL_PASSWORD:-SuaSenhaAdm}
  DEMO_EMAIL: ${DEMO_EMAIL:-demo@example.com}
  DEMO_PASSWORD: ${DEMO_PASSWORD:-demo123}
  DEMO_CLIENT_NAME: ${DEMO_CLIENT_NAME:-DemoClient}
  # Credenciais de SMTP
  EMAIL_PROVIDER: smtp
  SMTP_HOST: smtp.gmail.com
  SMTP_FROM: ${SMTP_FROM:-seuemail@gmail.com}
  SMTP_USER: ${SMTP_USER:-seuemail@gmail.com}
  SMTP_PASSWORD: ${SMTP_PASSWORD:-suasenhadeapp}
  SMTP_PORT: ${SMTP_PORT:-587}
  SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
  SMTP_USE_SSL: ${SMTP_USE_SSL:-false}


services:
  evoapi:
    image: evoapicloud/evo-ai:homolog
    ports:
      - "8000:8000"
    environment:
      <<: *variaveis
    volumes:
      - evoai_data:/evoai/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    networks:
      - interna
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.evoapi.rule=Host(`${SUBDOMAIN_EVOAPI}.${DOMAIN}`, `WWW.${SUBDOMAIN_EVOAPI}.${DOMAIN}`)
        - traefik.http.services.evoapi.loadbalancer.server.port=8000
        - traefik.http.routers.evoapi.service=evoapi
        - traefik.http.routers.evoapi.tls.certresolver=letsencryptresolver
        - traefik.http.routers.evoapi.entrypoints=websecure
        - traefik.http.routers.evoapi.tls=true

  evoaifront:
    image: evoapicloud/evo-ai-frontend:latest
    restart: unless-stopped
    networks:
      - interna
    #ports:
    #  - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: "3000"
      NEXT_PUBLIC_API_URL: "https://${SUBDOMAIN_EVOAPI}.${DOMAIN}"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.evoaifront.rule=Host(`${SUBDOMAIN-EVOFRONT}.${DOMAIN}`, `WWW.${SUBDOMAIN-EVOFRONT}.${DOMAIN}`)
        - traefik.http.services.evoaifront.loadbalancer.server.port=3000
        - traefik.http.routers.evoaifront.service=evoaifront
        - traefik.http.routers.evoaifront.tls.certresolver=letsencryptresolver
        - traefik.http.routers.evoaifront.entrypoints=websecure
        - traefik.http.routers.evoaifront.tls=true

# Optional Postgres and Redis services
# Uncomment these if you don't have existing Postgres and Redis stacks
#
#  postgres:
#    image: postgres:14-alpine
#    container_name: evo-ai-postgres
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
#      POSTGRES_DB: evo_ai
#    ports:
#      - "${POSTGRES_PORT:-5432}:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    restart: unless-stopped
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 10s
#    networks:
#      - interna
#
#  redis:
#    image: redis:alpine
#    container_name: evo-ai-redis
#    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
#    ports:
#      - "${REDIS_PORT:-6379}:6379"
#    volumes:
#      - redis_data:/data
#    restart: unless-stopped
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 5s
#      timeout: 30s
#      retries: 50
#    networks:
#      - interna

networks:
  interna:
    external: true

# Uncomment below volumes if you enable the optional Postgres and Redis services
#volumes:
#  postgres_data:
#    external: true
#  redis_data:
#    external: true

volumes:
  evoai_data:
    external: true
    name: evoai_data

# Database initialization
# If you don't have the required tables in Postgres, ensure your existing 'entrypoint_postgres' script or migrations
# create them, or run:
#  docker compose -f docker-compose.yml run api your-migration-command 